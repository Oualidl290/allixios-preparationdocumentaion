version: '3.8'

services:
  # ============================================================================
  # DATABASE SERVICES
  # ============================================================================
  
  # PostgreSQL - Primary Database
  postgres:
    image: postgres:15-alpine
    container_name: allixios-postgres
    environment:
      POSTGRES_DB: allixios
      POSTGRES_USER: allixios_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-allixios_secure_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
      - ../../databases/postgresql/schemas:/schemas
      - ../../databases/postgresql/functions:/functions
      - ../../databases/postgresql/migrations:/migrations
    ports:
      - "5432:5432"
    networks:
      - allixios-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U allixios_user -d allixios"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB - Document Store
  mongodb:
    image: mongo:7.0
    container_name: allixios-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-mongo_secure_password}
      MONGO_INITDB_DATABASE: allixios
    volumes:
      - mongodb_data:/data/db
      - ../../databases/mongodb/collections:/docker-entrypoint-initdb.d
    ports:
      - "27017:27017"
    networks:
      - allixios-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis - Caching Layer
  redis:
    image: redis:7-alpine
    container_name: allixios-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_secure_password} --appendonly yes
    volumes:
      - redis_data:/data
      - ../../databases/redis/config/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    networks:
      - allixios-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Elasticsearch - Search Engine
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: allixios-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
      - ../../databases/elasticsearch/mappings:/mappings
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - allixios-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ClickHouse - Analytics Database
  clickhouse:
    image: clickhouse/clickhouse-server:23.8-alpine
    container_name: allixios-clickhouse
    environment:
      CLICKHOUSE_DB: allixios
      CLICKHOUSE_USER: ${CLICKHOUSE_USER:-allixios_user}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:-clickhouse_secure_password}
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - ../../databases/clickhouse/schemas:/docker-entrypoint-initdb.d
    ports:
      - "8123:8123"
      - "9000:9000"
    networks:
      - allixios-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8123/ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ============================================================================
  # APPLICATION SERVICES
  # ============================================================================

  # API Gateway
  api-gateway:
    build:
      context: ../../services/api-gateway
      dockerfile: Dockerfile
    container_name: allixios-api-gateway
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3000
      DATABASE_URL: postgresql://allixios_user:${POSTGRES_PASSWORD:-allixios_secure_password}@postgres:5432/allixios
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_secure_password}@redis:6379
      JWT_SECRET: ${JWT_SECRET:-your_jwt_secret_key_here}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3001}
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - allixios-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Content Service
  content-service:
    build:
      context: ../../services/content-service
      dockerfile: Dockerfile
    container_name: allixios-content-service
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3001
      DATABASE_URL: postgresql://allixios_user:${POSTGRES_PASSWORD:-allixios_secure_password}@postgres:5432/allixios
      MONGODB_URL: mongodb://${MONGO_ROOT_USER:-admin}:${MONGO_ROOT_PASSWORD:-mongo_secure_password}@mongodb:27017/allixios?authSource=admin
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_secure_password}@redis:6379
      ELASTICSEARCH_URL: http://elasticsearch:9200
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    networks:
      - allixios-network
    restart: unless-stopped
    volumes:
      - media_storage:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # SEO Service
  seo-service:
    build:
      context: ../../services/seo-service
      dockerfile: Dockerfile
    container_name: allixios-seo-service
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3002
      DATABASE_URL: postgresql://allixios_user:${POSTGRES_PASSWORD:-allixios_secure_password}@postgres:5432/allixios
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_secure_password}@redis:6379
      ELASTICSEARCH_URL: http://elasticsearch:9200
    ports:
      - "3002:3002"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    networks:
      - allixios-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Analytics Service
  analytics-service:
    build:
      context: ../../services/analytics-service
      dockerfile: Dockerfile
    container_name: allixios-analytics-service
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3003
      DATABASE_URL: postgresql://allixios_user:${POSTGRES_PASSWORD:-allixios_secure_password}@postgres:5432/allixios
      CLICKHOUSE_URL: http://clickhouse:8123
      CLICKHOUSE_USER: ${CLICKHOUSE_USER:-allixios_user}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:-clickhouse_secure_password}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_secure_password}@redis:6379
    ports:
      - "3003:3003"
    depends_on:
      postgres:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - allixios-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # User Service
  user-service:
    build:
      context: ../../services/user-service
      dockerfile: Dockerfile
    container_name: allixios-user-service
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3004
      DATABASE_URL: postgresql://allixios_user:${POSTGRES_PASSWORD:-allixios_secure_password}@postgres:5432/allixios
      MONGODB_URL: mongodb://${MONGO_ROOT_USER:-admin}:${MONGO_ROOT_PASSWORD:-mongo_secure_password}@mongodb:27017/allixios?authSource=admin
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_secure_password}@redis:6379
      JWT_SECRET: ${JWT_SECRET:-your_jwt_secret_key_here}
    ports:
      - "3004:3004"
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - allixios-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Translation Service
  translation-service:
    build:
      context: ../../services/translation-service
      dockerfile: Dockerfile
    container_name: allixios-translation-service
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3005
      DATABASE_URL: postgresql://allixios_user:${POSTGRES_PASSWORD:-allixios_secure_password}@postgres:5432/allixios
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_secure_password}@redis:6379
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      GOOGLE_TRANSLATE_API_KEY: ${GOOGLE_TRANSLATE_API_KEY}
    ports:
      - "3005:3005"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - allixios-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3005/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Notification Service
  notification-service:
    build:
      context: ../../services/notification-service
      dockerfile: Dockerfile
    container_name: allixios-notification-service
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3006
      DATABASE_URL: postgresql://allixios_user:${POSTGRES_PASSWORD:-allixios_secure_password}@postgres:5432/allixios
      MONGODB_URL: mongodb://${MONGO_ROOT_USER:-admin}:${MONGO_ROOT_PASSWORD:-mongo_secure_password}@mongodb:27017/allixios?authSource=admin
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_secure_password}@redis:6379
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
    ports:
      - "3006:3006"
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - allixios-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3006/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================================================
  # WORKFLOW & AUTOMATION
  # ============================================================================

  # n8n Workflow Automation
  n8n:
    image: n8nio/n8n:latest
    container_name: allixios-n8n
    environment:
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_DATABASE: allixios
      DB_POSTGRESDB_USER: allixios_user
      DB_POSTGRESDB_PASSWORD: ${POSTGRES_PASSWORD:-allixios_secure_password}
      N8N_BASIC_AUTH_ACTIVE: true
      N8N_BASIC_AUTH_USER: ${N8N_USER:-admin}
      N8N_BASIC_AUTH_PASSWORD: ${N8N_PASSWORD:-n8n_secure_password}
      WEBHOOK_URL: ${N8N_WEBHOOK_URL:-http://localhost:5678}
      GENERIC_TIMEZONE: ${TIMEZONE:-UTC}
      N8N_SECURE_COOKIE: false
      N8N_HOST: ${N8N_HOST:-localhost}
      N8N_PORT: 5678
      N8N_PROTOCOL: http
    ports:
      - "5678:5678"
    volumes:
      - n8n_data:/home/node/.n8n
      - ../../workflows/n8n/custom-nodes:/home/node/.n8n/custom
      - ../../workflows/n8n/workflows:/home/node/.n8n/workflows
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - allixios-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5678/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================================================
  # MONITORING & OBSERVABILITY
  # ============================================================================

  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: allixios-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ../../monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ../../monitoring/prometheus/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - allixios-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana - Metrics Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: allixios-grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-grafana_secure_password}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ../../monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ../../monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3007:3000"
    depends_on:
      - prometheus
    networks:
      - allixios-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================================================
  # FRONTEND APPLICATIONS
  # ============================================================================

  # Public Website
  public-website:
    build:
      context: ../../frontend/public-website
      dockerfile: Dockerfile
    container_name: allixios-public-website
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      NEXT_PUBLIC_API_URL: ${API_URL:-http://localhost:3000}
      NEXT_PUBLIC_SITE_URL: ${SITE_URL:-http://localhost:3008}
    ports:
      - "3008:3000"
    depends_on:
      - api-gateway
    networks:
      - allixios-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Admin Dashboard
  admin-dashboard:
    build:
      context: ../../frontend/admin-dashboard
      dockerfile: Dockerfile
    container_name: allixios-admin-dashboard
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      REACT_APP_API_URL: ${API_URL:-http://localhost:3000}
      REACT_APP_N8N_URL: ${N8N_URL:-http://localhost:5678}
      REACT_APP_GRAFANA_URL: ${GRAFANA_URL:-http://localhost:3007}
    ports:
      - "3009:3000"
    depends_on:
      - api-gateway
    networks:
      - allixios-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

# ============================================================================
# NETWORKS
# ============================================================================
networks:
  allixios-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ============================================================================
# VOLUMES
# ============================================================================
volumes:
  postgres_data:
    driver: local
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local
  clickhouse_data:
    driver: local
  n8n_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  media_storage:
    driver: local