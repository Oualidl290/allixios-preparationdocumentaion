# Docker Compose for Allixios Services Development
# This file defines all microservices for local development

version: '3.8'

services:
  # ===========================================
  # CORE SERVICES
  # ===========================================

  content-service:
    build:
      context: ./content-service
      dockerfile: Dockerfile.dev
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
      - POSTGRES_HOST=postgres
      - MONGODB_URL=mongodb://mongodb:27017
      - REDIS_URL=redis://redis:6379
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    volumes:
      - ./content-service:/app
      - /app/node_modules
    depends_on:
      - postgres
      - mongodb
      - redis
      - elasticsearch
    networks:
      - allixios-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile.dev
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=development
      - PORT=3002
      - POSTGRES_HOST=postgres
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./user-service:/app
      - /app/node_modules
    depends_on:
      - postgres
      - redis
    networks:
      - allixios-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  analytics-service:
    build:
      context: ./analytics-service
      dockerfile: Dockerfile.dev
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=development
      - PORT=3003
      - MONGODB_URL=mongodb://mongodb:27017
      - CLICKHOUSE_URL=http://clickhouse:8123
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./analytics-service:/app
      - /app/node_modules
    depends_on:
      - mongodb
      - clickhouse
      - redis
    networks:
      - allixios-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  seo-service:
    build:
      context: ./seo-service
      dockerfile: Dockerfile.dev
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=development
      - PORT=3004
      - POSTGRES_HOST=postgres
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./seo-service:/app
      - /app/node_modules
    depends_on:
      - postgres
      - redis
    networks:
      - allixios-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  translation-service:
    build:
      context: ./translation-service
      dockerfile: Dockerfile.dev
    ports:
      - "3005:3005"
    environment:
      - NODE_ENV=development
      - PORT=3005
      - POSTGRES_HOST=postgres
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./translation-service:/app
      - /app/node_modules
    depends_on:
      - postgres
      - redis
    networks:
      - allixios-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3005/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile.dev
    ports:
      - "3006:3006"
    environment:
      - NODE_ENV=development
      - PORT=3006
      - POSTGRES_HOST=postgres
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./notification-service:/app
      - /app/node_modules
    depends_on:
      - postgres
      - redis
    networks:
      - allixios-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3006/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  monetization-service:
    build:
      context: ./monetization-service
      dockerfile: Dockerfile.dev
    ports:
      - "3007:3007"
    environment:
      - NODE_ENV=development
      - PORT=3007
      - POSTGRES_HOST=postgres
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./monetization-service:/app
      - /app/node_modules
    depends_on:
      - postgres
      - redis
    networks:
      - allixios-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3007/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===========================================
  # INFRASTRUCTURE SERVICES
  # ===========================================

  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: allixios
      POSTGRES_USER: allixios_user
      POSTGRES_PASSWORD: allixios_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../databases/postgresql/schemas:/docker-entrypoint-initdb.d
    networks:
      - allixios-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U allixios_user -d allixios"]
      interval: 30s
      timeout: 10s
      retries: 3

  mongodb:
    image: mongo:7
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: allixios
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ../databases/mongodb:/docker-entrypoint-initdb.d
    networks:
      - allixios-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - allixios-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - allixios-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  clickhouse:
    image: clickhouse/clickhouse-server:latest
    ports:
      - "8123:8123"
      - "9000:9000"
    volumes:
      - clickhouse_data:/var/lib/clickhouse
    environment:
      CLICKHOUSE_DB: allixios
      CLICKHOUSE_USER: default
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    networks:
      - allixios-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8123/ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===========================================
  # MONITORING & OBSERVABILITY
  # ===========================================

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ../infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - allixios-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ../infrastructure/monitoring/grafana:/etc/grafana/provisioning
    networks:
      - allixios-network
    restart: unless-stopped

  # ===========================================
  # API GATEWAY & LOAD BALANCER
  # ===========================================

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ../infrastructure/nginx/conf.d:/etc/nginx/conf.d
    depends_on:
      - content-service
      - user-service
      - analytics-service
      - seo-service
      - translation-service
      - notification-service
      - monetization-service
    networks:
      - allixios-network
    restart: unless-stopped

# ===========================================
# NETWORKS & VOLUMES
# ===========================================

networks:
  allixios-network:
    driver: bridge

volumes:
  postgres_data:
  mongodb_data:
  redis_data:
  elasticsearch_data:
  clickhouse_data:
  prometheus_data:
  grafana_data: